const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function fixBucketPermissions() {
  try {
    console.log('üîß Configuration du bucket invoices...')
    
    // V√©rifier la configuration actuelle
    const { data: buckets, error: bucketsError } = await supabase
      .from('storage.buckets')
      .select('*')
      .eq('id', 'invoices')
    
    if (bucketsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des buckets:', bucketsError)
      return
    }
    
    console.log('üìã Buckets trouv√©s:', buckets)
    
    if (buckets && buckets.length > 0) {
      const bucket = buckets[0]
      console.log('üîç Configuration actuelle du bucket invoices:')
      console.log('- ID:', bucket.id)
      console.log('- Public:', bucket.public)
      console.log('- File size limit:', bucket.file_size_limit)
      console.log('- Allowed MIME types:', bucket.allowed_mime_types)
      
      // Mettre √† jour le bucket pour le rendre public
      const { data: updateData, error: updateError } = await supabase
        .from('storage.buckets')
        .update({ 
          public: true,
          file_size_limit: 52428800, // 50MB
          allowed_mime_types: ['application/pdf', 'image/*']
        })
        .eq('id', 'invoices')
      
      if (updateError) {
        console.error('‚ùå Erreur lors de la mise √† jour du bucket:', updateError)
      } else {
        console.log('‚úÖ Bucket invoices configur√© comme public')
      }
    } else {
      console.log('‚ùå Bucket invoices non trouv√©')
    }
    
    // V√©rifier les politiques RLS
    const { data: policies, error: policiesError } = await supabase
      .from('pg_policies')
      .select('*')
      .eq('tablename', 'objects')
      .eq('schemaname', 'storage')
    
    if (policiesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des politiques:', policiesError)
    } else {
      console.log('üìã Politiques RLS existantes:', policies)
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

fixBucketPermissions()
