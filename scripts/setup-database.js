#!/usr/bin/env node

/**
 * Script de configuration de la base de donn√©es Supabase
 * Ex√©cute les migrations SQL pour cr√©er les tables n√©cessaires
 */

// Charger les variables d'environnement
require('dotenv').config({ path: '.env.local' })

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

async function setupDatabase() {
  console.log('üöÄ Configuration de la base de donn√©es Supabase...')
  
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Variables d\'environnement Supabase manquantes')
    console.log('Assurez-vous d\'avoir configur√©:')
    console.log('- NEXT_PUBLIC_SUPABASE_URL')
    console.log('- SUPABASE_SERVICE_ROLE_KEY')
    process.exit(1)
  }
  
  const supabase = createClient(supabaseUrl, supabaseKey)
  
  try {
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, '../supabase/migrations/001_initial_schema.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')
    
    console.log('üìÑ Ex√©cution des migrations...')
    
    // Ex√©cuter la migration
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationSQL
    })
    
    if (error) {
      console.error('‚ùå Erreur lors de l\'ex√©cution des migrations:', error)
      process.exit(1)
    }
    
    console.log('‚úÖ Migrations ex√©cut√©es avec succ√®s!')
    console.log('üéâ Base de donn√©es configur√©e et pr√™te √† l\'emploi!')
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
    process.exit(1)
  }
}

// Ex√©cuter le script
setupDatabase()
