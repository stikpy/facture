import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'
import { supabaseAdmin } from '@/lib/supabase'
import { StorageService } from '@/lib/storage'
import { DocumentProcessor } from '@/lib/ai/document-processor'
import { OCRProcessor } from '@/lib/ai/ocr-processor'

export async function POST(request: NextRequest) {
  console.log('üöÄ [SERVER] D√©but de la requ√™te POST /api/process')
  
  try {
    console.log('üîß [SERVER] Cr√©ation du client Supabase serveur')
    const supabase = await createClient()
    
    // V√©rifier l'authentification (cookies puis Authorization Bearer)
    console.log('üîê [SERVER] V√©rification de l\'authentification')
    let { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (!user) {
      const authHeader = request.headers.get('authorization')
      if (authHeader) {
        const token = authHeader.replace('Bearer ', '')
        const authResult = await supabase.auth.getUser(token)
        user = authResult.data.user
        authError = authResult.error
      }
    }
    
    if (authError || !user) {
      console.error('‚ùå [SERVER] Erreur d\'authentification:', authError)
      return NextResponse.json({ error: 'Erreur d\'authentification: ' + (authError?.message || 'Auth session missing!') }, { status: 401 })
    }
    
    console.log(`‚úÖ [SERVER] Utilisateur authentifi√©: ${user.email} (ID: ${user.id})`)

    console.log('üìÑ [SERVER] R√©cup√©ration des donn√©es de la requ√™te')
    const { fileId, fileName } = await request.json()
    console.log(`üìÅ [SERVER] Param√®tres re√ßus: fileId=${fileId}, fileName=${fileName}`)

    if (!fileId) {
      console.error('‚ùå [SERVER] ID de fichier manquant')
      return NextResponse.json({ error: 'ID de fichier requis' }, { status: 400 })
    }

    // R√©cup√©rer la facture (bypass RLS, avec contr√¥le d'ownership)
    console.log(`üîç [SERVER] R√©cup√©ration de la facture avec l'ID: ${fileId}`)
    const { data: invoice, error: invoiceError } = await (supabaseAdmin
      .from('invoices')
      .select('*')
      .eq('id', fileId)
      .single() as any)

    if (invoiceError) {
      console.error('‚ùå [SERVER] Erreur lors de la r√©cup√©ration de la facture:', invoiceError)
      return NextResponse.json({ error: 'Erreur lors de la r√©cup√©ration de la facture: ' + invoiceError.message }, { status: 404 })
    }
    
    if (!(invoice as any)) {
      console.error('‚ùå [SERVER] Facture non trouv√©e')
      return NextResponse.json({ error: 'Facture non trouv√©e' }, { status: 404 })
    }
    if ((invoice as any).user_id !== user.id) {
      console.error('‚ùå [SERVER] Acc√®s interdit √† la facture')
      return NextResponse.json({ error: 'Acc√®s interdit' }, { status: 403 })
    }
    
    console.log(`‚úÖ [SERVER] Facture trouv√©e: ${invoice.file_name} (${invoice.mime_type})`)

    // Mettre √† jour le statut
    console.log('üîÑ [SERVER] Mise √† jour du statut vers "processing"')
    await (supabaseAdmin as any)
      .from('invoices')
      .update({ status: 'processing' } as any)
      .eq('id', fileId)

    try {
      // T√©l√©charger le fichier
      console.log(`üì• [SERVER] T√©l√©chargement du fichier depuis: ${invoice.file_path}`)
      const storageService = new StorageService()
      const fileBuffer = await storageService.downloadFile(invoice.file_path)
      console.log(`üì¶ [SERVER] Fichier t√©l√©charg√©: ${fileBuffer.length} bytes`)

      let extractedText = ''

      // Traitement selon le type de fichier
      console.log(`üîç [SERVER] D√©but de l'extraction de texte (type: ${invoice.mime_type})`)
      if (invoice.mime_type === 'application/pdf') {
        console.log('üìÑ [SERVER] Traitement PDF avec OCR')
        const ocrProcessor = new OCRProcessor()
        const texts = await ocrProcessor.processPDF(fileBuffer)
        extractedText = texts.join('\n')
        await ocrProcessor.terminate()
        console.log(`‚úÖ [SERVER] Texte extrait du PDF: ${extractedText.length} caract√®res`)
      } else if (invoice.mime_type.startsWith('image/')) {
        console.log('üñºÔ∏è [SERVER] Traitement image avec OCR')
        const ocrProcessor = new OCRProcessor()
        extractedText = await ocrProcessor.processImage(fileBuffer)
        await ocrProcessor.terminate()
        console.log(`‚úÖ [SERVER] Texte extrait de l'image: ${extractedText.length} caract√®res`)
      }

      if (!extractedText.trim()) {
        console.error('‚ùå [SERVER] Aucun texte extrait du document')
        throw new Error('Aucun texte extrait du document')
      }

      // Traitement avec l'IA
      console.log('ü§ñ [SERVER] D√©but du traitement IA')
      const documentProcessor = new DocumentProcessor()
      const extractedData = await documentProcessor.processDocument(extractedText, fileName)
      console.log('‚úÖ [SERVER] Donn√©es extraites par l\'IA:', extractedData)
      
      const classification = await documentProcessor.classifyInvoice(extractedData)
      console.log('‚úÖ [SERVER] Classification:', classification)

      // Sauvegarder les donn√©es extraites
      console.log('üíæ [SERVER] Sauvegarde des donn√©es extraites en base')
      const { error: updateError } = await (supabaseAdmin as any)
        .from('invoices')
        .update({
          extracted_data: extractedData,
          classification: classification.category,
          status: 'completed'
        } as any)
        .eq('id', fileId)

      if (updateError) {
        console.error('‚ùå [SERVER] Erreur lors de la sauvegarde:', updateError)
        throw updateError
      }
      console.log('‚úÖ [SERVER] Donn√©es sauvegard√©es avec succ√®s')

      // Cr√©er les articles de facture si disponibles
      if (extractedData.items && extractedData.items.length > 0) {
        console.log(`üìã [SERVER] Cr√©ation de ${extractedData.items.length} articles de facture`)
        const items = extractedData.items.map(item => ({
          invoice_id: fileId,
          description: item.description,
          quantity: item.quantity,
          unit_price: item.unit_price,
          total_price: item.total_price
        }))

        await (supabaseAdmin as any)
          .from('invoice_items')
          .insert(items as any)
        console.log('‚úÖ [SERVER] Articles de facture cr√©√©s')
      }

      const response = {
        success: true,
        extractedData,
        classification
      }
      
      console.log('üéâ [SERVER] Traitement termin√© avec succ√®s:', response)
      return NextResponse.json(response)

    } catch (processingError) {
      console.error('‚ùå [SERVER] Erreur traitement:', processingError)
      
      // Mettre √† jour le statut d'erreur
      console.log('üîÑ [SERVER] Mise √† jour du statut vers "error"')
      await (supabaseAdmin as any)
        .from('invoices')
        .update({ 
          status: 'error',
          extracted_data: { error: (processingError as Error).message }
        } as any)
        .eq('id', fileId)

      return NextResponse.json(
        { error: 'Erreur lors du traitement du document: ' + (processingError as Error).message },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('Erreur API process:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
